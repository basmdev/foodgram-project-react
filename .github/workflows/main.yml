name: Main Foodgram Workflow

on:
  push:
    branches:
      - master

jobs:
  build_and_push_to_docker_hub:
    name: Build and Push Docker images to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Backend to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: backend/
          push: true
          tags: magfrg/foodgram_backend:latest
      - name: Push Frontend to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: frontend/
          push: true
          tags: magfrg/foodgram_frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_and_push_to_docker_hub
    steps:
      - name: Executing remote SSH commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd infra
            sudo docker compose -f docker-compose.production.yml down
            sudo docker pull magfrg/foodgram_frontend:latest
            sudo docker pull magfrg/foodgram_backend:latest
            touch .env
            echo DEBUG=${{ secrets.DEBUG }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo HOSTS=${{ secrets.HOSTS }} >> .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker compose -f docker-compose.production.yml up -d

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send message to Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Деплой успешно выполнен!
